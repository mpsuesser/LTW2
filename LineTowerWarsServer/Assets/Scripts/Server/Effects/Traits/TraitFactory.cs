using System;

public static class TraitFactory {
    public static Trait InstantiateActiveTraitIfExists(
        TraitType traitType,
        ServerEntity entity
    ) {
        Trait t = traitType switch {
            // Creeps
            TraitType.EnduranceAura1 => new TEnduranceAura1(entity),
            TraitType.EnduranceAura2 => new TEnduranceAura2(entity),
            TraitType.EnduranceAura3 => new TEnduranceAura3(entity),
            TraitType.EnduranceAura4 => new TEnduranceAura4(entity),
            TraitType.DevotionAura1 => new TDevotionAura1(entity),
            TraitType.DevotionAura2 => new TDevotionAura2(entity),
            TraitType.DevotionAura3 => new TDevotionAura3(entity),
            TraitType.DevotionAura4 => new TDevotionAura4(entity),
            TraitType.GeomancyAura1 => new TGeomancyAura1(entity),
            TraitType.GeomancyAura2 => new TGeomancyAura2(entity),
            TraitType.EtherealAura => new TEtherealAura(entity),
            TraitType.AncientAura1 => new TAncientAura1(entity),
            TraitType.AncientAura2 => new TAncientAura2(entity),
            TraitType.DeathPact1 => new TDeathPact1(entity),
            TraitType.DeathPact2 => new TDeathPact2(entity),
            TraitType.DeathPact3 => new TDeathPact3(entity),
            TraitType.UnholySacrifice1 => new TUnholySacrifice1(entity),
            TraitType.UnholySacrifice2 => new TUnholySacrifice2(entity),
            TraitType.UnholySacrifice3 => new TUnholySacrifice3(entity),
            TraitType.UnholySacrifice4 => new TUnholySacrifice4(entity),
            TraitType.Armored1 => new TArmored1(entity),
            TraitType.Armored2 => new TArmored2(entity),
            TraitType.Armored3 => new TArmored3(entity),
            TraitType.BasicSpellResistance => new TBasicSpellResistance(entity),
            TraitType.BasicSpellResistanceWithNoMentionOfImmunity => new TBasicSpellResistance(entity),
            TraitType.MajorSpellResistance => new TMajorSpellResistance(entity),
            TraitType.LegendarySpellResistance => new TLegendarySpellResistance(entity),
            TraitType.LingeringVoid => new TLingeringVoid(entity), // TODO: implement
            TraitType.NecroticTransfusion => new TNecroticTransfusion(entity),
            TraitType.StoneskinFortitude => new TStoneskinFortitude(entity),
            TraitType.VolatileDeath => new TVolatileDeath(entity),
            TraitType.ChaosEmpowermentAura => new TChaosEmpowermentAura(entity),
            TraitType.ChaoticVoid => new TChaoticVoid(entity),
            TraitType.Bombardment => new TBombardment(entity), // TODO: Projectile
            TraitType.ChaosPortal => new TChaosPortal(entity),
            TraitType.EarthShieldProvider => new TEarthShieldProvider(entity),
            TraitType.WarStance => new TWarStance(entity),
            TraitType.EngineOverload => new TEngineOverload(entity),
            TraitType.ReactiveArmor => new TReactiveArmor(entity),
            TraitType.GoblinEngineering => new TGoblinEngineering(entity),
            TraitType.Hypothermia => new THypothermia(entity),
            
            TraitType.Attacker => new TAttacker(entity),
            
            TraitType.GroundAttackOnly => new TGroundAttackOnly(entity),
            TraitType.AirAttackOnly => new TAirAttackOnly(entity),
            
            TraitType.Arcanize1 => new TArcanize1(entity),
            TraitType.Arcanize2 => new TArcanize2(entity),
            TraitType.VolatileArcane1 => new TVolatileArcane1(entity),
            TraitType.VolatileArcane2 => new TVolatileArcane2(entity),
            TraitType.OverwhelmingArcane => new TOverwhelmingArcane(entity),
            TraitType.Spellcaster1 => new TSpellcaster1(entity),
            TraitType.Spellcaster2 => new TSpellcaster2(entity),
            TraitType.KirinTorMastery => new TKirinTorMastery(entity),
            
            TraitType.Overcharge1 => new TOvercharge1(entity),
            TraitType.Overcharge2 => new TOvercharge2(entity),
            TraitType.FocusedLightning1 => new TFocusedLightning1(entity),
            TraitType.FocusedLightning2 => new TFocusedLightning2(entity),
            TraitType.Annihilation => new TAnnihilation(entity),
            TraitType.TurbulentWeather1 => new TTurbulentWeather1(entity),
            TraitType.TurbulentWeather2 => new TTurbulentWeather2(entity),
            TraitType.TurbulentWeather3 => new TTurbulentWeather3(entity),
            TraitType.StaticCharge1 => new TStaticCharge1(entity),
            TraitType.StaticCharge2 => new TStaticCharge2(entity),
            TraitType.Radiance => new TRadiance(entity),
            
            TraitType.ShatterArmor1 => new TShatterArmor1(entity),
            TraitType.ShatterArmor2 => new TShatterArmor2(entity),
            TraitType.DevastatingAttack1 => new TDevastatingAttack1(entity),
            TraitType.DevastatingAttack2 => new TDevastatingAttack2(entity),
            TraitType.NaturesGuidance => new TNaturesGuidance(entity),
            TraitType.Germination1 => new TGermination1(entity),
            TraitType.Germination2 => new TGermination2(entity),
            TraitType.LethalPreparation => new TLethalPreparation(entity),
            
            TraitType.FrostAttack1 => new TFrostAttack1(entity),
            TraitType.FrostAttack2 => new TFrostAttack2(entity),
            TraitType.FrostBlast1 => new TFrostBlast1(entity),
            TraitType.FrostBlast2 => new TFrostBlast2(entity),
            TraitType.ChillingDeath => new TChillingDeath(entity),
            TraitType.IceLance1 => new TIceLance1(entity),
            TraitType.IceLance2 => new TIceLance2(entity),
            TraitType.CrystallizedLight => new TCrystallizedLight(entity),
            
            TraitType.BurstingLight1 => new TBurstingLight1(entity),
            TraitType.BurstingLight2 => new TBurstingLight2(entity),
            TraitType.BlindingLight1 => new TBlindingLight1(entity),
            TraitType.BlindingLight2 => new TBlindingLight2(entity),
            TraitType.TitanDefenseMechanism => new TTitanDefenseMechanism(entity),
            TraitType.LightBurst1 => new TLightBurst1(entity),
            TraitType.LightBurst2 => new TLightBurst2(entity),
            TraitType.DivineSpores => new TDivineSpores(entity),
            
            TraitType.Ignite1 => new TIgnite1(entity),
            TraitType.Ignite2 => new TIgnite2(entity),
            TraitType.RisingHeat1 => new TRisingHeat1(entity),
            TraitType.RisingHeat2 => new TRisingHeat2(entity),
            TraitType.VolcanicEruption => new TVolcanicEruption(entity),
            TraitType.OverwhelmingImpact1 => new TOverwhelmingImpact1(entity),
            TraitType.OverwhelmingImpact2 => new TOverwhelmingImpact2(entity),
            TraitType.VoidFlare => new TVoidFlare(entity),
            
            TraitType.CrushingWave1 => new TCrushingWave1(entity),
            TraitType.CrushingWave2 => new TCrushingWave2(entity),
            TraitType.PressuringWater1 => new TPressuringWater1(entity),
            TraitType.PressuringWater2 => new TPressuringWater2(entity),
            TraitType.HurricaneStorm => new THurricaneStorm(entity),
            TraitType.Torrent1 => new TTorrent1(entity),
            TraitType.Torrent2 => new TTorrent2(entity),
            TraitType.CripplingDecay => new TCripplingDecay(entity),
            
            TraitType.Corruption1 => new TCorruption1(entity),
            TraitType.Corruption2 => new TCorruption2(entity),
            TraitType.RapidInfection1 => new TRapidInfection1(entity),
            TraitType.RapidInfection2 => new TRapidInfection2(entity),
            TraitType.Pestilence => new TPestilence(entity),
            TraitType.UnholyMiasma1 => new TUnholyMiasma1(entity),
            TraitType.UnholyMiasma2 => new TUnholyMiasma2(entity),
            TraitType.Hellfire => new THellfire(entity),
            
            TraitType.VoidGrowth1 => new TVoidGrowth1(entity),
            TraitType.VoidGrowth2 => new TVoidGrowth2(entity),
            TraitType.TemporalRift1 => new TTemporalRift1(entity),
            TraitType.TemporalRift2 => new TTemporalRift2(entity),
            TraitType.ImplosionRift => new TImplosionRift(entity),
            TraitType.VoidLashing1 => new TVoidLashing1(entity),
            TraitType.VoidLashing2 => new TVoidLashing2(entity),
            TraitType.HungeringVoid => new THungeringVoid(entity),
            
            TraitType.EssenceOfNatureAura1 => new TEssenceOfNatureAura1(entity),
            TraitType.EssenceOfNatureAura2 => new TEssenceOfNatureAura2(entity),
            TraitType.EssenceOfLightAura1 => new TEssenceOfLightAura1(entity),
            TraitType.EssenceOfLightAura2 => new TEssenceOfLightAura2(entity),
            TraitType.EssenceOfFrostAura1 => new TEssenceOfFrostAura1(entity),
            TraitType.EssenceOfFrostAura2 => new TEssenceOfFrostAura2(entity),
            TraitType.EssenceOfPowerAura1 => new TEssenceOfPowerAura1(entity),
            TraitType.EssenceOfPowerAura2 => new TEssenceOfPowerAura2(entity),
            TraitType.EssenceOfBlightAura1 => new TEssenceOfBlightAura1(entity),
            TraitType.EssenceOfBlightAura2 => new TEssenceOfBlightAura2(entity),
            TraitType.EssenceOfDarknessAura1 => new TEssenceOfDarknessAura1(entity),
            TraitType.EssenceOfDarknessAura2 => new TEssenceOfDarknessAura2(entity),
            TraitType.EssenceOfTheSeaAura1 => new TEssenceOfTheSeaAura1(entity),
            TraitType.EssenceOfTheSeaAura2 => new TEssenceOfTheSeaAura2(entity),
            TraitType.ArcaneReaction1 => new TArcaneReaction1(entity),
            TraitType.ArcaneReaction2 => new TArcaneReaction2(entity),
            TraitType.ExplosiveReaction1 => new TExplosiveReaction1(entity),
            TraitType.ExplosiveReaction2 => new TExplosiveReaction2(entity),
            
            _ => null,
        };

        if (t == null) {
            throw new NotImplementedException();
        }

        return t;
    }
}